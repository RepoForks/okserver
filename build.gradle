buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath 'org.jsoup:jsoup:1.10.2'
  }
}

group 'info.jdavid.ok.server'
version '3.6.0.3'

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'idea'

repositories {
  jcenter()
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

tasks.withType(JavaCompile) {
  doFirst {
    String jre6Home = System.getProperty('java.home').replaceAll('\\\\', '/').replaceFirst(/1[.][789]/, '1.6')
    if (new File(jre6Home).exists()) {
      options.fork = true
      options.bootClasspath = fileTree(include: [ '*.jar' ], dir: "${jre6Home}/lib").join(File.pathSeparator)
      options.extensionDirs = "${jre6Home}/lib/ext"
    }
  }
}

tasks.withType(Test) {
  doFirst {
    jvmArgs('-Xbootclasspath/p:' + configurations.alpn.files{it.group=='info.jdavid.alpn'})
  }
}

ext {
  bintrayApiKey = new File("$projectDir/local.properties").with {
    it.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
  }
  jdkVersion = Runtime.class.getPackage().getImplementationVersion().
    replaceFirst('1\\.([78])\\.0_([0-9]+)', '$1.$2')
  println jdkVersion
}

configurations {
  samplesCompile.extendsFrom compile
  samplesRuntime.extendsFrom runtime
  alpn
}

sourceSets {
  samples {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/samples/java')
    }
    resources {
      srcDir file('src/samples/resources')
    }
  }
  test {
    java {
      compileClasspath += samples.output
      runtimeClasspath += samples.output
    }
  }
}


dependencies {
  compile 'com.squareup.okhttp3:okhttp:3.6.0'
  compile 'org.slf4j:slf4j-api:1.7.24'
  alpn "info.jdavid.alpn:alpn-boot:${jdkVersion}"
  testCompile 'junit:junit:4.12'
  testRuntime 'org.slf4j:slf4j-jdk14:1.7.24'
}

jacoco {
  reportsDir = file("$buildDir/jacoco/reports")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }
}

test {
  String jreHome = System.getProperty('java.home').replaceAll('\\\\', '/')
  FileTree bootClasspath = configurations.alpn.asFileTree.plus(
    fileTree(include: [ '*.jar' ], dir: "${jreHome}/lib")
  )
  setBootstrapClasspath(bootClasspath)
  testLogging {
    showStandardStreams = true
  }
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpFile = file("$buildDir/jacoco/classpathdumps")
  }
  systemProperty 'https.proptocols', 'TLSv1.2'
  doLast {
    File html = reports.html.entryPoint
    def doc = org.jsoup.Jsoup.parse(html, 'UTF-8')
    int total = doc.select('#tests > .counter').text() as int
    int failed = doc.select('#failures > .counter').text() as int

    def readme = file('README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-_${text}-${color}.png?style=flat"
    }
    String label = 'Tests'
    String text = "${total-failed}/${total}"
    String color = failed == 0 ? 'green' : (failed < 3 ? 'yellow' : 'red')
    String v = project.version
    def download =
      "https://bintray.com/artifact/download/programingjd/maven/info/jdavid/" +
      "ok/server/okserver/$v/okserver-${v}.jar"
    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter',v,'6688ff')}) &#x2003; ![jcenter](${badge(label,text,color)})"
        case 9: return "[Download](${download}) the latest jar."
        case 19: return "  <version>${v}</version>"
        case 32: return "  compile 'info.jdavid.ok.server:okserver:${v}'"
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
  finalizedBy tasks.jacocoTestReport
//  outputs.upToDateWhen { false }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}


bintray {
  user = 'programingjd'
  key = bintrayApiKey
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.ok.server'
    websiteUrl = 'https://github.com/programingjd/okserver'
    issueTrackerUrl = 'https://github.com/programingjd/okserver/issues'
    vcsUrl = 'https://github.com/programingjd/okserver.git'
    githubRepo = 'programingjd/okserver'
    githubReleaseNotesFile = 'README.md'
    licenses = ['Apache-2.0']
    labels = ['server','http','okio','okhttp','java']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

tasks.bintrayUpload.dependsOn tasks.check
